#include<iostream>
#include<stack>
#include<cctype>
using namespace std;
struct Node{
    char data;
    Node* right;
    Node* left;
    Node(char val):data(val),left(nullptr),right(nullptr){}
};
bool isoperator(char c){
    return c=='+' || c=='-' || c=='*' || c=='/';
}
Node* tree(string prefix){
    stack<Node*>st;
    for(int i=prefix.length()-1;i>=0;i--){
        char ch=prefix[i];
        Node* node=new Node(ch);
        if(isoperator(ch)){
            node->left=st.top();st.pop();
            node->right=st.top();st.pop();    
        }
        st.push(node);
        }
        return st.top();
 }
void post(Node* root){
    if(root==nullptr)return;
    stack<Node*>s1,s2;
    s1.push(root);
    while(!s1.empty()){
        Node* temp=s1.top();s1.pop();
        s2.push(temp);
        if(temp->left){
            s1.push(temp->left);
        }
        if(temp->right){
            s1.push(temp->right);
        }
    }
    cout<<"Post order : ";
    while(!s2.empty()){
    cout<<s2.top()->data<<" ";
    s2.pop();
    }
    cout<<endl;
}
 void del(Node* root){
    if(root== nullptr)  return;
    del(root->left);
    del(root->right);
    cout<<"Deleting :"<<root->data<<endl;
    delete root;
 }
 int main(){
    string prefix;
    cout<<"Enter prefix : ";
    cin>>prefix;
    Node* root=tree(prefix);
    post(root);
    del(root);
    return 0;
}
