#include <iostream>
#include <string>
#include <algorithm>
using namespace std;

// Node structure for AVL Tree
struct Node {
    string keyword;
    string meaning;
    Node* left;
    Node* right;
    int height;

    Node(string k, string m) {
        keyword = k;
        meaning = m;
        left = right = nullptr;
        height = 1;
    }
};

// Height helper
int height(Node* root) {
    return root ? root->height : 0;
}

// Balance Factor
int getBalance(Node* root) {
    return root ? height(root->left) - height(root->right) : 0;
}

// Right rotate
Node* rightRotate(Node* y) {
    Node* x = y->left;
    Node* T2 = x->right;
    x->right = y;
    y->left = T2;
    y->height = max(height(y->left), height(y->right)) + 1;
    x->height = max(height(x->left), height(x->right)) + 1;
    return x;
}

// Left rotate
Node* leftRotate(Node* x) {
    Node* y = x->right;
    Node* T2 = y->left;
    y->left = x;
    x->right = T2;
    x->height = max(height(x->left), height(x->right)) + 1;
    y->height = max(height(y->left), height(y->right)) + 1;
    return y;
}

// Insert
Node* insert(Node* root, string keyword, string meaning) {
    if (!root)
        return new Node(keyword, meaning);

    if (keyword < root->keyword)
        root->left = insert(root->left, keyword, meaning);
    else if (keyword > root->keyword)
        root->right = insert(root->right, keyword, meaning);
    else {
        cout << "Keyword already exists!\n";
        return root;
    }

    root->height = max(height(root->left), height(root->right)) + 1;
    int balance = getBalance(root);

    if (balance > 1 && keyword < root->left->keyword)
        return rightRotate(root);
    if (balance < -1 && keyword > root->right->keyword)
        return leftRotate(root);
    if (balance > 1 && keyword > root->left->keyword) {
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }
    if (balance < -1 && keyword < root->right->keyword) {
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }

    return root;
}

// Find min node
Node* minValueNode(Node* root) {
    while (root->left)
        root = root->left;
    return root;
}

// Delete
Node* deleteNode(Node* root, string keyword) {
    if (!root)
        return root;

    if (keyword < root->keyword)
        root->left = deleteNode(root->left, keyword);
    else if (keyword > root->keyword)
        root->right = deleteNode(root->right, keyword);
    else {
        if (!root->left || !root->right) {
            Node* temp = root->left ? root->left : root->right;
            delete root;
            return temp;
        } else {
            Node* temp = minValueNode(root->right);
            root->keyword = temp->keyword;
            root->meaning = temp->meaning;
            root->right = deleteNode(root->right, temp->keyword);
        }
    }

    root->height = max(height(root->left), height(root->right)) + 1;
    int balance = getBalance(root);

    if (balance > 1 && getBalance(root->left) >= 0)
        return rightRotate(root);
    if (balance < -1 && getBalance(root->right) <= 0)
        return leftRotate(root);
    if (balance > 1 && getBalance(root->left) < 0) {
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }
    if (balance < -1 && getBalance(root->right) > 0) {
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }

    return root;
}

// Search with comparison count
Node* search(Node* root, string keyword, int& comparisons) {
    if (!root)
        return nullptr;
    comparisons++;
    if (keyword == root->keyword)
        return root;
    else if (keyword < root->keyword)
        return search(root->left, keyword, comparisons);
    else
        return search(root->right, keyword, comparisons);
}

// Update
bool update(Node* root, string keyword, string newMeaning) {
    if (!root) return false;
    if (keyword == root->keyword) {
        root->meaning = newMeaning;
        return true;
    } else if (keyword < root->keyword)
        return update(root->left, keyword, newMeaning);
    else
        return update(root->right, keyword, newMeaning);
}

// Display Ascending
void displayAscending(Node* root) {
    if (!root) return;
    displayAscending(root->left);
    cout << root->keyword << " : " << root->meaning << endl;
    displayAscending(root->right);
}

// Display Descending
void displayDescending(Node* root) {
    if (!root) return;
    displayDescending(root->right);
    cout << root->keyword << " : " << root->meaning << endl;
    displayDescending(root->left);
}

int maxComparisons(Node* root) {
    return height(root); // Height of AVL tree is the max comparisons
}

int main() {
    Node* root = nullptr;
    int choice;
    string keyword, meaning;
    
    while (true) {
        cout << "\n--- Dictionary Menu ---\n";
        cout << "1. Add keyword\n2. Delete keyword\n3. Update meaning\n4. Display Ascending\n";
        cout << "5. Display Descending\n6. Search keyword\n7. Max Comparisons\n8. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter keyword: ";
                cin >> keyword;
                cin.ignore();
                cout << "Enter meaning: ";
                getline(cin, meaning);
                root = insert(root, keyword, meaning);
                break;
            case 2:
                cout << "Enter keyword to delete: ";
                cin >> keyword;
                root = deleteNode(root, keyword);
                break;
            case 3:
                cout << "Enter keyword to update: ";
                cin >> keyword;
                cin.ignore();
                cout << "Enter new meaning: ";
                getline(cin, meaning);
                if (update(root, keyword, meaning))
                    cout << "Meaning updated.\n";
                else
                    cout << "Keyword not found.\n";
                break;
            case 4:
                cout << "Dictionary in ascending order:\n";
                displayAscending(root);
                break;
            case 5:
                cout << "Dictionary in descending order:\n";
                displayDescending(root);
                break;
            case 6: {
                cout << "Enter keyword to search: ";
                cin >> keyword;
                int comparisons = 0;
                Node* result = search(root, keyword, comparisons);
                if (result)
                    cout << "Found! Meaning: " << result->meaning << " | Comparisons: " << comparisons << endl;
                else
                    cout << "Not found! Comparisons: " << comparisons << endl;
                break;
            }
            case 7:
                cout << "Maximum comparisons (tree height): " << maxComparisons(root) << endl;
                cout << "Time Complexity: O(log n) for balanced AVL Tree.\n";
                break;
            case 8:
                cout << "Exiting...\n";
                return 0;
            default:
                cout << "Invalid choice.\n";
        }
    }
    return 0;
}
