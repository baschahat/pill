#include <iostream>
#include <vector>
#include <queue>
using namespace std;

class FlightGraph {
private:
    int numCities;
    vector<string> cityNames;
    vector<vector<int>> adjMatrix;  // Adjacency matrix to store cost (time/fuel)

public:
    FlightGraph(int n) {
        numCities = n;
        cityNames.resize(n);
        adjMatrix.resize(n, vector<int>(n, 0));
    }

    void inputCities() {
        cout << "Enter city names:\n";
        for (int i = 0; i < numCities; i++) {
            cout << "City " << i << ": ";
            cin >> cityNames[i];
        }
    }

    void addFlight(int src, int dest, int cost) {
        adjMatrix[src][dest] = cost;
        adjMatrix[dest][src] = cost;  // Assuming undirected graph (two-way flights)
    }

    void displayMatrix() {
        cout << "\nAdjacency Matrix (Flight Cost):\n";
        for (int i = 0; i < numCities; i++) {
            for (int j = 0; j < numCities; j++) {
                cout << adjMatrix[i][j] << "\t";
            }
            cout << endl;
        }
    }

    bool isConnected() {
        vector<bool> visited(numCities, false);
        queue<int> q;
        int count = 0;

        q.push(0);
        visited[0] = true;

        while (!q.empty()) {
            int u = q.front(); q.pop();
            count++;

            for (int v = 0; v < numCities; v++) {
                if (adjMatrix[u][v] != 0 && !visited[v]) {
                    visited[v] = true;
                    q.push(v);
                }
            }
        }

        return count == numCities;
    }
};

int main() {
    int n;
    cout << "Enter number of cities: ";
    cin >> n;

    FlightGraph graph(n);
    graph.inputCities();

    int flights;
    cout << "Enter number of flights: ";
    cin >> flights;

    cout << "Enter flights as: source_index destination_index cost\n";
    for (int i = 0; i < flights; i++) {
        int src, dest, cost;
        cin >> src >> dest >> cost;
        graph.addFlight(src, dest, cost);
    }

    graph.displayMatrix();

    if (graph.isConnected()) {
        cout << "\nThe graph is connected.\n";
    } else {
        cout << "\nThe graph is NOT connected.\n";
    }

    return 0;
}
